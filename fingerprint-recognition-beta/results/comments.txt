### MAIN.PY

# super_secret_dict = {}
# reverse_dict = {}

# for dir_name, subdir_list, file_list in walk(root_file):
#     i = 0
#     for fname in file_list:
#         print(fname)
#         if fname[-4:] == '.bmp':
#             i += 1
#             fingerprints.append(a_acquire.acquire_from_file(f'{dir_name}/{fname}', view=False))
#             super_secret_dict[cnt] = [fname[:-6], i]
#             reverse_dict[fname[:-6]] = cnt
#     cnt += 1
#     # if cnt > 3:
#     #     break

# print('done with loading')
# pprint(super_secret_dict)
# pprint(reverse_dict)
# pp_fingerprints = [b_enhance.enhance(fprint, dark_ridges=False, view=False) for fprint in fingerprints]

# curr_id = 0
# print('done with enhancement')
# p_cnt = float('inf')
# for pp_print in pp_fingerprints:
#     try: 
#         if p_cnt >= super_secret_dict[curr_id][1]:
#             a_acquire.FINGER_DICT[curr_id] = []
#             p_cnt = 0
#             curr_id += 1
#         ridges, bifs = c_describe.describe(pp_print[1], pp_print[2], view=False)
#         a_acquire.FINGER_DICT[curr_id-1].append((pp_print[1].tolist(), ridges.tolist(), bifs.tolist()))
#         p_cnt += 1
#     except:
#         continue

# fd = open('dataset.json', 'w')
# fd.write(json.dumps(a_acquire.FINGER_DICT))
# fd.close()

# fd2 = open('ids.json', 'w')
# fd2.write(json.dumps(super_secret_dict))
# fd2.close()

# pprint(a_acquire.FINGER_DICT)
# pprint(fingerprints)
# pprint(pp_fingerprints)
# pprint(minutia)

# matches = d_match.match(new_dict[1][0][0], new_dict[1][0][1], new_dict[1][0][2], new_dict[1][1][0], new_dict[1][1][1], new_dict[1][1][2], view=False)

# print(len(matches[0]))
# print(len(matches[1]))
# pprint(matches)

# matches = d_match.match(a_acquire.FINGER_DICT[3][0][0], a_acquire.FINGER_DICT[3][0][1], a_acquire.FINGER_DICT[3][0][2], a_acquire.FINGER_DICT[3][1][0], a_acquire.FINGER_DICT[3][1][1], a_acquire.FINGER_DICT[3][1][2], view=True)
# matches = d_match.match(en_fingerprint_1, ridge_endings_1, bifurcations_1,
# #                         en_fingerprint_2, ridge_endings_2, bifurcations_2, view=True)
# pprint(matches)

### MATCH.PY

# matches = _compute_matches(minutiae_1_points, minutiae_1_angles, minutiae_1_types,
                #                            minutiae_2_points, minutiae_2_angles, minutiae_2_types,
                #                            x_scale, y_scale, rotation, translation_overlay_rate, translation_step,
                #                            dist_threshold, angle_threshold)

                # print('[INFO] Hough transform at', str([x_scale, y_scale, rotation]) + ':', len(matches), 'matches.')

                # if it is the best configuration so far, stores it
                # if len(best_matches) < len(matches):
                #     best_matches = matches
                #     best_config = [x_scale, y_scale, rotation]